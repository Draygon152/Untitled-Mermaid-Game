//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Scripts/InputSystem/PlayerInputControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputControl"",
    ""maps"": [
        {
            ""name"": ""playerMouseControl"",
            ""id"": ""94ea6fab-84d5-4458-9fa0-a34260753e1c"",
            ""actions"": [
                {
                    ""name"": ""MouseAxis"",
                    ""type"": ""Value"",
                    ""id"": ""aaf6c8d3-262a-4460-b953-3f69dbfd8de7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5569d600-599a-4fee-bef5-958857baa1dd"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // playerMouseControl
        m_playerMouseControl = asset.FindActionMap("playerMouseControl", throwIfNotFound: true);
        m_playerMouseControl_MouseAxis = m_playerMouseControl.FindAction("MouseAxis", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // playerMouseControl
    private readonly InputActionMap m_playerMouseControl;
    private List<IPlayerMouseControlActions> m_PlayerMouseControlActionsCallbackInterfaces = new List<IPlayerMouseControlActions>();
    private readonly InputAction m_playerMouseControl_MouseAxis;
    public struct PlayerMouseControlActions
    {
        private @PlayerInputControl m_Wrapper;
        public PlayerMouseControlActions(@PlayerInputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseAxis => m_Wrapper.m_playerMouseControl_MouseAxis;
        public InputActionMap Get() { return m_Wrapper.m_playerMouseControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMouseControlActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMouseControlActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMouseControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMouseControlActionsCallbackInterfaces.Add(instance);
            @MouseAxis.started += instance.OnMouseAxis;
            @MouseAxis.performed += instance.OnMouseAxis;
            @MouseAxis.canceled += instance.OnMouseAxis;
        }

        private void UnregisterCallbacks(IPlayerMouseControlActions instance)
        {
            @MouseAxis.started -= instance.OnMouseAxis;
            @MouseAxis.performed -= instance.OnMouseAxis;
            @MouseAxis.canceled -= instance.OnMouseAxis;
        }

        public void RemoveCallbacks(IPlayerMouseControlActions instance)
        {
            if (m_Wrapper.m_PlayerMouseControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMouseControlActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMouseControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMouseControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMouseControlActions @playerMouseControl => new PlayerMouseControlActions(this);
    public interface IPlayerMouseControlActions
    {
        void OnMouseAxis(InputAction.CallbackContext context);
    }
}
